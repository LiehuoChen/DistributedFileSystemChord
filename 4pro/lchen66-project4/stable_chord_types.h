/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef stable_chord_TYPES_H
#define stable_chord_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef std::string UserID;

typedef int64_t Timestamp;

typedef struct _SystemException__isset {
  _SystemException__isset() : message(false) {}
  bool message;
} _SystemException__isset;

class SystemException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  SystemException() : message() {
  }

  virtual ~SystemException() throw() {}

  std::string message;

  _SystemException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const SystemException & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SystemException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SystemException &a, SystemException &b);

typedef struct _NodeID__isset {
  _NodeID__isset() : id(false), ip(false), port(false), count(false) {}
  bool id;
  bool ip;
  bool port;
  bool count;
} _NodeID__isset;

class NodeID {
 public:

  static const char* ascii_fingerprint; // = "6C490E00301248580B234D1B4BD756FB";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x49,0x0E,0x00,0x30,0x12,0x48,0x58,0x0B,0x23,0x4D,0x1B,0x4B,0xD7,0x56,0xFB};

  NodeID() : id(), ip(), port(0), count(0) {
  }

  virtual ~NodeID() throw() {}

  std::string id;
  std::string ip;
  int32_t port;
  int32_t count;

  _NodeID__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  void __set_count(const int32_t val) {
    count = val;
    __isset.count = true;
  }

  bool operator == (const NodeID & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (__isset.count != rhs.__isset.count)
      return false;
    else if (__isset.count && !(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const NodeID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NodeID &a, NodeID &b);



#endif
