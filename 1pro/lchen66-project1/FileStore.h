/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileStore_H
#define FileStore_H

#include <thrift/TDispatchProcessor.h>
#include "fileservice_types.h"



class FileStoreIf {
 public:
  virtual ~FileStoreIf() {}
  virtual void listOwnedFiles(std::vector<RFileMetadata> & _return, const UserID& user) = 0;
  virtual void writeFile(StatusReport& _return, const RFile& rFile) = 0;
  virtual void readFile(RFile& _return, const std::string& filename, const UserID& owner) = 0;
  virtual void deleteFile(StatusReport& _return, const std::string& filename, const UserID& owner) = 0;
};

class FileStoreIfFactory {
 public:
  typedef FileStoreIf Handler;

  virtual ~FileStoreIfFactory() {}

  virtual FileStoreIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileStoreIf* /* handler */) = 0;
};

class FileStoreIfSingletonFactory : virtual public FileStoreIfFactory {
 public:
  FileStoreIfSingletonFactory(const boost::shared_ptr<FileStoreIf>& iface) : iface_(iface) {}
  virtual ~FileStoreIfSingletonFactory() {}

  virtual FileStoreIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileStoreIf* /* handler */) {}

 protected:
  boost::shared_ptr<FileStoreIf> iface_;
};

class FileStoreNull : virtual public FileStoreIf {
 public:
  virtual ~FileStoreNull() {}
  void listOwnedFiles(std::vector<RFileMetadata> & /* _return */, const UserID& /* user */) {
    return;
  }
  void writeFile(StatusReport& /* _return */, const RFile& /* rFile */) {
    return;
  }
  void readFile(RFile& /* _return */, const std::string& /* filename */, const UserID& /* owner */) {
    return;
  }
  void deleteFile(StatusReport& /* _return */, const std::string& /* filename */, const UserID& /* owner */) {
    return;
  }
};

typedef struct _FileStore_listOwnedFiles_args__isset {
  _FileStore_listOwnedFiles_args__isset() : user(false) {}
  bool user;
} _FileStore_listOwnedFiles_args__isset;

class FileStore_listOwnedFiles_args {
 public:

  FileStore_listOwnedFiles_args() : user() {
  }

  virtual ~FileStore_listOwnedFiles_args() throw() {}

  UserID user;

  _FileStore_listOwnedFiles_args__isset __isset;

  void __set_user(const UserID& val) {
    user = val;
  }

  bool operator == (const FileStore_listOwnedFiles_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const FileStore_listOwnedFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_listOwnedFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_listOwnedFiles_pargs {
 public:


  virtual ~FileStore_listOwnedFiles_pargs() throw() {}

  const UserID* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_listOwnedFiles_result__isset {
  _FileStore_listOwnedFiles_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_listOwnedFiles_result__isset;

class FileStore_listOwnedFiles_result {
 public:

  FileStore_listOwnedFiles_result() {
  }

  virtual ~FileStore_listOwnedFiles_result() throw() {}

  std::vector<RFileMetadata>  success;
  SystemException systemException;

  _FileStore_listOwnedFiles_result__isset __isset;

  void __set_success(const std::vector<RFileMetadata> & val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_listOwnedFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_listOwnedFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_listOwnedFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_listOwnedFiles_presult__isset {
  _FileStore_listOwnedFiles_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_listOwnedFiles_presult__isset;

class FileStore_listOwnedFiles_presult {
 public:


  virtual ~FileStore_listOwnedFiles_presult() throw() {}

  std::vector<RFileMetadata> * success;
  SystemException systemException;

  _FileStore_listOwnedFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_writeFile_args__isset {
  _FileStore_writeFile_args__isset() : rFile(false) {}
  bool rFile;
} _FileStore_writeFile_args__isset;

class FileStore_writeFile_args {
 public:

  FileStore_writeFile_args() {
  }

  virtual ~FileStore_writeFile_args() throw() {}

  RFile rFile;

  _FileStore_writeFile_args__isset __isset;

  void __set_rFile(const RFile& val) {
    rFile = val;
  }

  bool operator == (const FileStore_writeFile_args & rhs) const
  {
    if (!(rFile == rhs.rFile))
      return false;
    return true;
  }
  bool operator != (const FileStore_writeFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_writeFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_writeFile_pargs {
 public:


  virtual ~FileStore_writeFile_pargs() throw() {}

  const RFile* rFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_writeFile_result__isset {
  _FileStore_writeFile_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_writeFile_result__isset;

class FileStore_writeFile_result {
 public:

  FileStore_writeFile_result() {
  }

  virtual ~FileStore_writeFile_result() throw() {}

  StatusReport success;
  SystemException systemException;

  _FileStore_writeFile_result__isset __isset;

  void __set_success(const StatusReport& val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_writeFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_writeFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_writeFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_writeFile_presult__isset {
  _FileStore_writeFile_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_writeFile_presult__isset;

class FileStore_writeFile_presult {
 public:


  virtual ~FileStore_writeFile_presult() throw() {}

  StatusReport* success;
  SystemException systemException;

  _FileStore_writeFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_readFile_args__isset {
  _FileStore_readFile_args__isset() : filename(false), owner(false) {}
  bool filename;
  bool owner;
} _FileStore_readFile_args__isset;

class FileStore_readFile_args {
 public:

  FileStore_readFile_args() : filename(), owner() {
  }

  virtual ~FileStore_readFile_args() throw() {}

  std::string filename;
  UserID owner;

  _FileStore_readFile_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_owner(const UserID& val) {
    owner = val;
  }

  bool operator == (const FileStore_readFile_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const FileStore_readFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_readFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_readFile_pargs {
 public:


  virtual ~FileStore_readFile_pargs() throw() {}

  const std::string* filename;
  const UserID* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_readFile_result__isset {
  _FileStore_readFile_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_readFile_result__isset;

class FileStore_readFile_result {
 public:

  FileStore_readFile_result() {
  }

  virtual ~FileStore_readFile_result() throw() {}

  RFile success;
  SystemException systemException;

  _FileStore_readFile_result__isset __isset;

  void __set_success(const RFile& val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_readFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_readFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_readFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_readFile_presult__isset {
  _FileStore_readFile_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_readFile_presult__isset;

class FileStore_readFile_presult {
 public:


  virtual ~FileStore_readFile_presult() throw() {}

  RFile* success;
  SystemException systemException;

  _FileStore_readFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_deleteFile_args__isset {
  _FileStore_deleteFile_args__isset() : filename(false), owner(false) {}
  bool filename;
  bool owner;
} _FileStore_deleteFile_args__isset;

class FileStore_deleteFile_args {
 public:

  FileStore_deleteFile_args() : filename(), owner() {
  }

  virtual ~FileStore_deleteFile_args() throw() {}

  std::string filename;
  UserID owner;

  _FileStore_deleteFile_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_owner(const UserID& val) {
    owner = val;
  }

  bool operator == (const FileStore_deleteFile_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const FileStore_deleteFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_deleteFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_deleteFile_pargs {
 public:


  virtual ~FileStore_deleteFile_pargs() throw() {}

  const std::string* filename;
  const UserID* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_deleteFile_result__isset {
  _FileStore_deleteFile_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_deleteFile_result__isset;

class FileStore_deleteFile_result {
 public:

  FileStore_deleteFile_result() {
  }

  virtual ~FileStore_deleteFile_result() throw() {}

  StatusReport success;
  SystemException systemException;

  _FileStore_deleteFile_result__isset __isset;

  void __set_success(const StatusReport& val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_deleteFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_deleteFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_deleteFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_deleteFile_presult__isset {
  _FileStore_deleteFile_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_deleteFile_presult__isset;

class FileStore_deleteFile_presult {
 public:


  virtual ~FileStore_deleteFile_presult() throw() {}

  StatusReport* success;
  SystemException systemException;

  _FileStore_deleteFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FileStoreClient : virtual public FileStoreIf {
 public:
  FileStoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FileStoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void listOwnedFiles(std::vector<RFileMetadata> & _return, const UserID& user);
  void send_listOwnedFiles(const UserID& user);
  void recv_listOwnedFiles(std::vector<RFileMetadata> & _return);
  void writeFile(StatusReport& _return, const RFile& rFile);
  void send_writeFile(const RFile& rFile);
  void recv_writeFile(StatusReport& _return);
  void readFile(RFile& _return, const std::string& filename, const UserID& owner);
  void send_readFile(const std::string& filename, const UserID& owner);
  void recv_readFile(RFile& _return);
  void deleteFile(StatusReport& _return, const std::string& filename, const UserID& owner);
  void send_deleteFile(const std::string& filename, const UserID& owner);
  void recv_deleteFile(StatusReport& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileStoreProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FileStoreIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileStoreProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_listOwnedFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileStoreProcessor(boost::shared_ptr<FileStoreIf> iface) :
    iface_(iface) {
    processMap_["listOwnedFiles"] = &FileStoreProcessor::process_listOwnedFiles;
    processMap_["writeFile"] = &FileStoreProcessor::process_writeFile;
    processMap_["readFile"] = &FileStoreProcessor::process_readFile;
    processMap_["deleteFile"] = &FileStoreProcessor::process_deleteFile;
  }

  virtual ~FileStoreProcessor() {}
};

class FileStoreProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileStoreProcessorFactory(const ::boost::shared_ptr< FileStoreIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FileStoreIfFactory > handlerFactory_;
};

class FileStoreMultiface : virtual public FileStoreIf {
 public:
  FileStoreMultiface(std::vector<boost::shared_ptr<FileStoreIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileStoreMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FileStoreIf> > ifaces_;
  FileStoreMultiface() {}
  void add(boost::shared_ptr<FileStoreIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void listOwnedFiles(std::vector<RFileMetadata> & _return, const UserID& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listOwnedFiles(_return, user);
    }
    ifaces_[i]->listOwnedFiles(_return, user);
    return;
  }

  void writeFile(StatusReport& _return, const RFile& rFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeFile(_return, rFile);
    }
    ifaces_[i]->writeFile(_return, rFile);
    return;
  }

  void readFile(RFile& _return, const std::string& filename, const UserID& owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readFile(_return, filename, owner);
    }
    ifaces_[i]->readFile(_return, filename, owner);
    return;
  }

  void deleteFile(StatusReport& _return, const std::string& filename, const UserID& owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteFile(_return, filename, owner);
    }
    ifaces_[i]->deleteFile(_return, filename, owner);
    return;
  }

};



#endif
