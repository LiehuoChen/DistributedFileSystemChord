#!/usr/bin/python

import re,sys,hashlib

hs=[chr(i+ord('0')) for i in xrange(10)]
hs.extend([chr(i+ord('a')) for i in xrange(6)])
hsd=dict([(hs[i],i) for i in xrange(len(hs))])

def hs_add(h1,h2):
    if len(h1)>len(h2):
        swp=h1;h1=h2;h2=swp
        
    df=len(h2)-len(h1)
    res=[]
    c=0
    for i in xrange(len(h1)-1,-1,-1):
        r=hsd[h1[i]]+hsd[h2[i+df]]+c
        res.append(hs[r%16])
        c=r/16

    for i in xrange(df-1,-1,-1):
        r=hsd[h2[i]]+c
        res.append(hs[r%16])
        c=r/16

    if c>0:
        res.append(hs[c])

    res.reverse()
    return ''.join(res)

def bs(k,lst,b,e):
    if b+1==e:
        if e==1 and k<=lst[b].id: return 0
        else: return e
    
    m=(b+e)/2
    if k<=lst[m].id: return bs(k,lst,b,m)
    else: return bs(k,lst,m,e)
    
def create_fing(id,lst):
    fing=[]
    dd=['1','2','4','8']
    add=['0']*64
    for i in xrange(64):
        for j in xrange(4):
            add[63-i]=dd[j]
            fid=hs_add(id,add)[-64:]

            idx=bs(fid,lst,0,len(lst))
            
            if idx>=len(lst): 
                fing.append(lst[0])
            else: 
                fing.append(lst[idx])
        add[63-i]='0'
    
    return fing

class NodeID:
    def __init__(self,key,ip,port):
        s=self
        s.id=key
        s.ip=ip
        s.port=port
    
    def __repr__(self):
        s=self
        return '%20s%10s%72s'%(s.ip,s.port,s.id)
    
def nows(l):
    m=re.search('(\\S+):(\\d+)',l)
    
    ip=m.group(1)
    port=m.group(2)
    sha256=hashlib.sha256()
    sha256.update('%s:%s'%(ip,port))
    k=sha256.hexdigest()
    
    return NodeID(k,ip,port)

if __name__=='__main__':
    fn=sys.argv[1]
    lst=sorted(map(nows,open(fn)),key=lambda x:x.id)
    for l in lst:
        fing=create_fing(l.id,lst)
        print
        print 'Fingertable for',l.ip,l.port

        l1=[]
        l1.append(['index','ip address','port','digest'])
        for i,e in enumerate(fing):
            l1.append([str(i),e.ip,e.port,e.id])

        mx=[0 for _ in xrange(len(l1[0]))]
        for l in l1:
            for i in xrange(len(mx)):
                if len(l[i])>mx[i]: mx[i]=len(l[i])

        for l in l1:
            sp=[' '*(mx[i]-len(l[i])+4) for i in xrange(len(l))]
            print ''.join(reduce(lambda x,y: x+list(y),zip(l,sp),[]))
