/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileStore_H
#define FileStore_H

#include <thrift/TDispatchProcessor.h>
#include "chord_join_remove_dht_types.h"



class FileStoreIf {
 public:
  virtual ~FileStoreIf() {}
  virtual void writeFile(const RFile& rFile) = 0;
  virtual void readFile(RFile& _return, const std::string& filename, const UserID& owner) = 0;
  virtual void deleteFile(const std::string& filename, const UserID& owner) = 0;
  virtual void findSucc(NodeID& _return, const std::string& key) = 0;
  virtual void findPred(NodeID& _return, const std::string& key) = 0;
  virtual void getNodeSucc(NodeID& _return) = 0;
  virtual void setNodePred(const NodeID& nodeId) = 0;
  virtual void updateFinger(const int32_t idx, const NodeID& nodeId) = 0;
  virtual void getFingertable(std::vector<NodeID> & _return) = 0;
  virtual void pullUnownedFiles(std::vector<RFile> & _return) = 0;
  virtual void pushUnownedFiles(const std::vector<RFile> & files) = 0;
  virtual void join(const NodeID& nodeId) = 0;
  virtual void remove() = 0;
};

class FileStoreIfFactory {
 public:
  typedef FileStoreIf Handler;

  virtual ~FileStoreIfFactory() {}

  virtual FileStoreIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileStoreIf* /* handler */) = 0;
};

class FileStoreIfSingletonFactory : virtual public FileStoreIfFactory {
 public:
  FileStoreIfSingletonFactory(const boost::shared_ptr<FileStoreIf>& iface) : iface_(iface) {}
  virtual ~FileStoreIfSingletonFactory() {}

  virtual FileStoreIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileStoreIf* /* handler */) {}

 protected:
  boost::shared_ptr<FileStoreIf> iface_;
};

class FileStoreNull : virtual public FileStoreIf {
 public:
  virtual ~FileStoreNull() {}
  void writeFile(const RFile& /* rFile */) {
    return;
  }
  void readFile(RFile& /* _return */, const std::string& /* filename */, const UserID& /* owner */) {
    return;
  }
  void deleteFile(const std::string& /* filename */, const UserID& /* owner */) {
    return;
  }
  void findSucc(NodeID& /* _return */, const std::string& /* key */) {
    return;
  }
  void findPred(NodeID& /* _return */, const std::string& /* key */) {
    return;
  }
  void getNodeSucc(NodeID& /* _return */) {
    return;
  }
  void setNodePred(const NodeID& /* nodeId */) {
    return;
  }
  void updateFinger(const int32_t /* idx */, const NodeID& /* nodeId */) {
    return;
  }
  void getFingertable(std::vector<NodeID> & /* _return */) {
    return;
  }
  void pullUnownedFiles(std::vector<RFile> & /* _return */) {
    return;
  }
  void pushUnownedFiles(const std::vector<RFile> & /* files */) {
    return;
  }
  void join(const NodeID& /* nodeId */) {
    return;
  }
  void remove() {
    return;
  }
};

typedef struct _FileStore_writeFile_args__isset {
  _FileStore_writeFile_args__isset() : rFile(false) {}
  bool rFile;
} _FileStore_writeFile_args__isset;

class FileStore_writeFile_args {
 public:

  FileStore_writeFile_args() {
  }

  virtual ~FileStore_writeFile_args() throw() {}

  RFile rFile;

  _FileStore_writeFile_args__isset __isset;

  void __set_rFile(const RFile& val) {
    rFile = val;
  }

  bool operator == (const FileStore_writeFile_args & rhs) const
  {
    if (!(rFile == rhs.rFile))
      return false;
    return true;
  }
  bool operator != (const FileStore_writeFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_writeFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_writeFile_pargs {
 public:


  virtual ~FileStore_writeFile_pargs() throw() {}

  const RFile* rFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_writeFile_result__isset {
  _FileStore_writeFile_result__isset() : systemException(false) {}
  bool systemException;
} _FileStore_writeFile_result__isset;

class FileStore_writeFile_result {
 public:

  FileStore_writeFile_result() {
  }

  virtual ~FileStore_writeFile_result() throw() {}

  SystemException systemException;

  _FileStore_writeFile_result__isset __isset;

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_writeFile_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_writeFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_writeFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_writeFile_presult__isset {
  _FileStore_writeFile_presult__isset() : systemException(false) {}
  bool systemException;
} _FileStore_writeFile_presult__isset;

class FileStore_writeFile_presult {
 public:


  virtual ~FileStore_writeFile_presult() throw() {}

  SystemException systemException;

  _FileStore_writeFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_readFile_args__isset {
  _FileStore_readFile_args__isset() : filename(false), owner(false) {}
  bool filename;
  bool owner;
} _FileStore_readFile_args__isset;

class FileStore_readFile_args {
 public:

  FileStore_readFile_args() : filename(), owner() {
  }

  virtual ~FileStore_readFile_args() throw() {}

  std::string filename;
  UserID owner;

  _FileStore_readFile_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_owner(const UserID& val) {
    owner = val;
  }

  bool operator == (const FileStore_readFile_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const FileStore_readFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_readFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_readFile_pargs {
 public:


  virtual ~FileStore_readFile_pargs() throw() {}

  const std::string* filename;
  const UserID* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_readFile_result__isset {
  _FileStore_readFile_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_readFile_result__isset;

class FileStore_readFile_result {
 public:

  FileStore_readFile_result() {
  }

  virtual ~FileStore_readFile_result() throw() {}

  RFile success;
  SystemException systemException;

  _FileStore_readFile_result__isset __isset;

  void __set_success(const RFile& val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_readFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_readFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_readFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_readFile_presult__isset {
  _FileStore_readFile_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_readFile_presult__isset;

class FileStore_readFile_presult {
 public:


  virtual ~FileStore_readFile_presult() throw() {}

  RFile* success;
  SystemException systemException;

  _FileStore_readFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_deleteFile_args__isset {
  _FileStore_deleteFile_args__isset() : filename(false), owner(false) {}
  bool filename;
  bool owner;
} _FileStore_deleteFile_args__isset;

class FileStore_deleteFile_args {
 public:

  FileStore_deleteFile_args() : filename(), owner() {
  }

  virtual ~FileStore_deleteFile_args() throw() {}

  std::string filename;
  UserID owner;

  _FileStore_deleteFile_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_owner(const UserID& val) {
    owner = val;
  }

  bool operator == (const FileStore_deleteFile_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const FileStore_deleteFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_deleteFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_deleteFile_pargs {
 public:


  virtual ~FileStore_deleteFile_pargs() throw() {}

  const std::string* filename;
  const UserID* owner;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_deleteFile_result__isset {
  _FileStore_deleteFile_result__isset() : systemException(false) {}
  bool systemException;
} _FileStore_deleteFile_result__isset;

class FileStore_deleteFile_result {
 public:

  FileStore_deleteFile_result() {
  }

  virtual ~FileStore_deleteFile_result() throw() {}

  SystemException systemException;

  _FileStore_deleteFile_result__isset __isset;

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_deleteFile_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_deleteFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_deleteFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_deleteFile_presult__isset {
  _FileStore_deleteFile_presult__isset() : systemException(false) {}
  bool systemException;
} _FileStore_deleteFile_presult__isset;

class FileStore_deleteFile_presult {
 public:


  virtual ~FileStore_deleteFile_presult() throw() {}

  SystemException systemException;

  _FileStore_deleteFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_findSucc_args__isset {
  _FileStore_findSucc_args__isset() : key(false) {}
  bool key;
} _FileStore_findSucc_args__isset;

class FileStore_findSucc_args {
 public:

  FileStore_findSucc_args() : key() {
  }

  virtual ~FileStore_findSucc_args() throw() {}

  std::string key;

  _FileStore_findSucc_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const FileStore_findSucc_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FileStore_findSucc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_findSucc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_findSucc_pargs {
 public:


  virtual ~FileStore_findSucc_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_findSucc_result__isset {
  _FileStore_findSucc_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_findSucc_result__isset;

class FileStore_findSucc_result {
 public:

  FileStore_findSucc_result() {
  }

  virtual ~FileStore_findSucc_result() throw() {}

  NodeID success;
  SystemException systemException;

  _FileStore_findSucc_result__isset __isset;

  void __set_success(const NodeID& val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_findSucc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_findSucc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_findSucc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_findSucc_presult__isset {
  _FileStore_findSucc_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_findSucc_presult__isset;

class FileStore_findSucc_presult {
 public:


  virtual ~FileStore_findSucc_presult() throw() {}

  NodeID* success;
  SystemException systemException;

  _FileStore_findSucc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_findPred_args__isset {
  _FileStore_findPred_args__isset() : key(false) {}
  bool key;
} _FileStore_findPred_args__isset;

class FileStore_findPred_args {
 public:

  FileStore_findPred_args() : key() {
  }

  virtual ~FileStore_findPred_args() throw() {}

  std::string key;

  _FileStore_findPred_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const FileStore_findPred_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FileStore_findPred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_findPred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_findPred_pargs {
 public:


  virtual ~FileStore_findPred_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_findPred_result__isset {
  _FileStore_findPred_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_findPred_result__isset;

class FileStore_findPred_result {
 public:

  FileStore_findPred_result() {
  }

  virtual ~FileStore_findPred_result() throw() {}

  NodeID success;
  SystemException systemException;

  _FileStore_findPred_result__isset __isset;

  void __set_success(const NodeID& val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_findPred_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_findPred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_findPred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_findPred_presult__isset {
  _FileStore_findPred_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_findPred_presult__isset;

class FileStore_findPred_presult {
 public:


  virtual ~FileStore_findPred_presult() throw() {}

  NodeID* success;
  SystemException systemException;

  _FileStore_findPred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FileStore_getNodeSucc_args {
 public:

  FileStore_getNodeSucc_args() {
  }

  virtual ~FileStore_getNodeSucc_args() throw() {}


  bool operator == (const FileStore_getNodeSucc_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_getNodeSucc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getNodeSucc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_getNodeSucc_pargs {
 public:


  virtual ~FileStore_getNodeSucc_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_getNodeSucc_result__isset {
  _FileStore_getNodeSucc_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_getNodeSucc_result__isset;

class FileStore_getNodeSucc_result {
 public:

  FileStore_getNodeSucc_result() {
  }

  virtual ~FileStore_getNodeSucc_result() throw() {}

  NodeID success;
  SystemException systemException;

  _FileStore_getNodeSucc_result__isset __isset;

  void __set_success(const NodeID& val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_getNodeSucc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_getNodeSucc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getNodeSucc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_getNodeSucc_presult__isset {
  _FileStore_getNodeSucc_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_getNodeSucc_presult__isset;

class FileStore_getNodeSucc_presult {
 public:


  virtual ~FileStore_getNodeSucc_presult() throw() {}

  NodeID* success;
  SystemException systemException;

  _FileStore_getNodeSucc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_setNodePred_args__isset {
  _FileStore_setNodePred_args__isset() : nodeId(false) {}
  bool nodeId;
} _FileStore_setNodePred_args__isset;

class FileStore_setNodePred_args {
 public:

  FileStore_setNodePred_args() {
  }

  virtual ~FileStore_setNodePred_args() throw() {}

  NodeID nodeId;

  _FileStore_setNodePred_args__isset __isset;

  void __set_nodeId(const NodeID& val) {
    nodeId = val;
  }

  bool operator == (const FileStore_setNodePred_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const FileStore_setNodePred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_setNodePred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_setNodePred_pargs {
 public:


  virtual ~FileStore_setNodePred_pargs() throw() {}

  const NodeID* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_setNodePred_result__isset {
  _FileStore_setNodePred_result__isset() : systemException(false) {}
  bool systemException;
} _FileStore_setNodePred_result__isset;

class FileStore_setNodePred_result {
 public:

  FileStore_setNodePred_result() {
  }

  virtual ~FileStore_setNodePred_result() throw() {}

  SystemException systemException;

  _FileStore_setNodePred_result__isset __isset;

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_setNodePred_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_setNodePred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_setNodePred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_setNodePred_presult__isset {
  _FileStore_setNodePred_presult__isset() : systemException(false) {}
  bool systemException;
} _FileStore_setNodePred_presult__isset;

class FileStore_setNodePred_presult {
 public:


  virtual ~FileStore_setNodePred_presult() throw() {}

  SystemException systemException;

  _FileStore_setNodePred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_updateFinger_args__isset {
  _FileStore_updateFinger_args__isset() : idx(false), nodeId(false) {}
  bool idx;
  bool nodeId;
} _FileStore_updateFinger_args__isset;

class FileStore_updateFinger_args {
 public:

  FileStore_updateFinger_args() : idx(0) {
  }

  virtual ~FileStore_updateFinger_args() throw() {}

  int32_t idx;
  NodeID nodeId;

  _FileStore_updateFinger_args__isset __isset;

  void __set_idx(const int32_t val) {
    idx = val;
  }

  void __set_nodeId(const NodeID& val) {
    nodeId = val;
  }

  bool operator == (const FileStore_updateFinger_args & rhs) const
  {
    if (!(idx == rhs.idx))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const FileStore_updateFinger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_updateFinger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_updateFinger_pargs {
 public:


  virtual ~FileStore_updateFinger_pargs() throw() {}

  const int32_t* idx;
  const NodeID* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_updateFinger_result__isset {
  _FileStore_updateFinger_result__isset() : systemException(false) {}
  bool systemException;
} _FileStore_updateFinger_result__isset;

class FileStore_updateFinger_result {
 public:

  FileStore_updateFinger_result() {
  }

  virtual ~FileStore_updateFinger_result() throw() {}

  SystemException systemException;

  _FileStore_updateFinger_result__isset __isset;

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_updateFinger_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_updateFinger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_updateFinger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_updateFinger_presult__isset {
  _FileStore_updateFinger_presult__isset() : systemException(false) {}
  bool systemException;
} _FileStore_updateFinger_presult__isset;

class FileStore_updateFinger_presult {
 public:


  virtual ~FileStore_updateFinger_presult() throw() {}

  SystemException systemException;

  _FileStore_updateFinger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FileStore_getFingertable_args {
 public:

  FileStore_getFingertable_args() {
  }

  virtual ~FileStore_getFingertable_args() throw() {}


  bool operator == (const FileStore_getFingertable_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_getFingertable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getFingertable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_getFingertable_pargs {
 public:


  virtual ~FileStore_getFingertable_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_getFingertable_result__isset {
  _FileStore_getFingertable_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_getFingertable_result__isset;

class FileStore_getFingertable_result {
 public:

  FileStore_getFingertable_result() {
  }

  virtual ~FileStore_getFingertable_result() throw() {}

  std::vector<NodeID>  success;
  SystemException systemException;

  _FileStore_getFingertable_result__isset __isset;

  void __set_success(const std::vector<NodeID> & val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_getFingertable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_getFingertable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_getFingertable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_getFingertable_presult__isset {
  _FileStore_getFingertable_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_getFingertable_presult__isset;

class FileStore_getFingertable_presult {
 public:


  virtual ~FileStore_getFingertable_presult() throw() {}

  std::vector<NodeID> * success;
  SystemException systemException;

  _FileStore_getFingertable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FileStore_pullUnownedFiles_args {
 public:

  FileStore_pullUnownedFiles_args() {
  }

  virtual ~FileStore_pullUnownedFiles_args() throw() {}


  bool operator == (const FileStore_pullUnownedFiles_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_pullUnownedFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_pullUnownedFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_pullUnownedFiles_pargs {
 public:


  virtual ~FileStore_pullUnownedFiles_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_pullUnownedFiles_result__isset {
  _FileStore_pullUnownedFiles_result__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_pullUnownedFiles_result__isset;

class FileStore_pullUnownedFiles_result {
 public:

  FileStore_pullUnownedFiles_result() {
  }

  virtual ~FileStore_pullUnownedFiles_result() throw() {}

  std::vector<RFile>  success;
  SystemException systemException;

  _FileStore_pullUnownedFiles_result__isset __isset;

  void __set_success(const std::vector<RFile> & val) {
    success = val;
  }

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_pullUnownedFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_pullUnownedFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_pullUnownedFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_pullUnownedFiles_presult__isset {
  _FileStore_pullUnownedFiles_presult__isset() : success(false), systemException(false) {}
  bool success;
  bool systemException;
} _FileStore_pullUnownedFiles_presult__isset;

class FileStore_pullUnownedFiles_presult {
 public:


  virtual ~FileStore_pullUnownedFiles_presult() throw() {}

  std::vector<RFile> * success;
  SystemException systemException;

  _FileStore_pullUnownedFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_pushUnownedFiles_args__isset {
  _FileStore_pushUnownedFiles_args__isset() : files(false) {}
  bool files;
} _FileStore_pushUnownedFiles_args__isset;

class FileStore_pushUnownedFiles_args {
 public:

  FileStore_pushUnownedFiles_args() {
  }

  virtual ~FileStore_pushUnownedFiles_args() throw() {}

  std::vector<RFile>  files;

  _FileStore_pushUnownedFiles_args__isset __isset;

  void __set_files(const std::vector<RFile> & val) {
    files = val;
  }

  bool operator == (const FileStore_pushUnownedFiles_args & rhs) const
  {
    if (!(files == rhs.files))
      return false;
    return true;
  }
  bool operator != (const FileStore_pushUnownedFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_pushUnownedFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_pushUnownedFiles_pargs {
 public:


  virtual ~FileStore_pushUnownedFiles_pargs() throw() {}

  const std::vector<RFile> * files;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_pushUnownedFiles_result__isset {
  _FileStore_pushUnownedFiles_result__isset() : systemException(false) {}
  bool systemException;
} _FileStore_pushUnownedFiles_result__isset;

class FileStore_pushUnownedFiles_result {
 public:

  FileStore_pushUnownedFiles_result() {
  }

  virtual ~FileStore_pushUnownedFiles_result() throw() {}

  SystemException systemException;

  _FileStore_pushUnownedFiles_result__isset __isset;

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_pushUnownedFiles_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_pushUnownedFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_pushUnownedFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_pushUnownedFiles_presult__isset {
  _FileStore_pushUnownedFiles_presult__isset() : systemException(false) {}
  bool systemException;
} _FileStore_pushUnownedFiles_presult__isset;

class FileStore_pushUnownedFiles_presult {
 public:


  virtual ~FileStore_pushUnownedFiles_presult() throw() {}

  SystemException systemException;

  _FileStore_pushUnownedFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FileStore_join_args__isset {
  _FileStore_join_args__isset() : nodeId(false) {}
  bool nodeId;
} _FileStore_join_args__isset;

class FileStore_join_args {
 public:

  FileStore_join_args() {
  }

  virtual ~FileStore_join_args() throw() {}

  NodeID nodeId;

  _FileStore_join_args__isset __isset;

  void __set_nodeId(const NodeID& val) {
    nodeId = val;
  }

  bool operator == (const FileStore_join_args & rhs) const
  {
    if (!(nodeId == rhs.nodeId))
      return false;
    return true;
  }
  bool operator != (const FileStore_join_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_join_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_join_pargs {
 public:


  virtual ~FileStore_join_pargs() throw() {}

  const NodeID* nodeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_join_result__isset {
  _FileStore_join_result__isset() : systemException(false) {}
  bool systemException;
} _FileStore_join_result__isset;

class FileStore_join_result {
 public:

  FileStore_join_result() {
  }

  virtual ~FileStore_join_result() throw() {}

  SystemException systemException;

  _FileStore_join_result__isset __isset;

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_join_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_join_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_join_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_join_presult__isset {
  _FileStore_join_presult__isset() : systemException(false) {}
  bool systemException;
} _FileStore_join_presult__isset;

class FileStore_join_presult {
 public:


  virtual ~FileStore_join_presult() throw() {}

  SystemException systemException;

  _FileStore_join_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FileStore_remove_args {
 public:

  FileStore_remove_args() {
  }

  virtual ~FileStore_remove_args() throw() {}


  bool operator == (const FileStore_remove_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_remove_pargs {
 public:


  virtual ~FileStore_remove_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_remove_result__isset {
  _FileStore_remove_result__isset() : systemException(false) {}
  bool systemException;
} _FileStore_remove_result__isset;

class FileStore_remove_result {
 public:

  FileStore_remove_result() {
  }

  virtual ~FileStore_remove_result() throw() {}

  SystemException systemException;

  _FileStore_remove_result__isset __isset;

  void __set_systemException(const SystemException& val) {
    systemException = val;
  }

  bool operator == (const FileStore_remove_result & rhs) const
  {
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const FileStore_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileStore_remove_presult__isset {
  _FileStore_remove_presult__isset() : systemException(false) {}
  bool systemException;
} _FileStore_remove_presult__isset;

class FileStore_remove_presult {
 public:


  virtual ~FileStore_remove_presult() throw() {}

  SystemException systemException;

  _FileStore_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FileStoreClient : virtual public FileStoreIf {
 public:
  FileStoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FileStoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void writeFile(const RFile& rFile);
  void send_writeFile(const RFile& rFile);
  void recv_writeFile();
  void readFile(RFile& _return, const std::string& filename, const UserID& owner);
  void send_readFile(const std::string& filename, const UserID& owner);
  void recv_readFile(RFile& _return);
  void deleteFile(const std::string& filename, const UserID& owner);
  void send_deleteFile(const std::string& filename, const UserID& owner);
  void recv_deleteFile();
  void findSucc(NodeID& _return, const std::string& key);
  void send_findSucc(const std::string& key);
  void recv_findSucc(NodeID& _return);
  void findPred(NodeID& _return, const std::string& key);
  void send_findPred(const std::string& key);
  void recv_findPred(NodeID& _return);
  void getNodeSucc(NodeID& _return);
  void send_getNodeSucc();
  void recv_getNodeSucc(NodeID& _return);
  void setNodePred(const NodeID& nodeId);
  void send_setNodePred(const NodeID& nodeId);
  void recv_setNodePred();
  void updateFinger(const int32_t idx, const NodeID& nodeId);
  void send_updateFinger(const int32_t idx, const NodeID& nodeId);
  void recv_updateFinger();
  void getFingertable(std::vector<NodeID> & _return);
  void send_getFingertable();
  void recv_getFingertable(std::vector<NodeID> & _return);
  void pullUnownedFiles(std::vector<RFile> & _return);
  void send_pullUnownedFiles();
  void recv_pullUnownedFiles(std::vector<RFile> & _return);
  void pushUnownedFiles(const std::vector<RFile> & files);
  void send_pushUnownedFiles(const std::vector<RFile> & files);
  void recv_pushUnownedFiles();
  void join(const NodeID& nodeId);
  void send_join(const NodeID& nodeId);
  void recv_join();
  void remove();
  void send_remove();
  void recv_remove();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileStoreProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FileStoreIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileStoreProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_writeFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findSucc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findPred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNodeSucc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setNodePred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateFinger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFingertable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pullUnownedFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushUnownedFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_join(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileStoreProcessor(boost::shared_ptr<FileStoreIf> iface) :
    iface_(iface) {
    processMap_["writeFile"] = &FileStoreProcessor::process_writeFile;
    processMap_["readFile"] = &FileStoreProcessor::process_readFile;
    processMap_["deleteFile"] = &FileStoreProcessor::process_deleteFile;
    processMap_["findSucc"] = &FileStoreProcessor::process_findSucc;
    processMap_["findPred"] = &FileStoreProcessor::process_findPred;
    processMap_["getNodeSucc"] = &FileStoreProcessor::process_getNodeSucc;
    processMap_["setNodePred"] = &FileStoreProcessor::process_setNodePred;
    processMap_["updateFinger"] = &FileStoreProcessor::process_updateFinger;
    processMap_["getFingertable"] = &FileStoreProcessor::process_getFingertable;
    processMap_["pullUnownedFiles"] = &FileStoreProcessor::process_pullUnownedFiles;
    processMap_["pushUnownedFiles"] = &FileStoreProcessor::process_pushUnownedFiles;
    processMap_["join"] = &FileStoreProcessor::process_join;
    processMap_["remove"] = &FileStoreProcessor::process_remove;
  }

  virtual ~FileStoreProcessor() {}
};

class FileStoreProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileStoreProcessorFactory(const ::boost::shared_ptr< FileStoreIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FileStoreIfFactory > handlerFactory_;
};

class FileStoreMultiface : virtual public FileStoreIf {
 public:
  FileStoreMultiface(std::vector<boost::shared_ptr<FileStoreIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileStoreMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FileStoreIf> > ifaces_;
  FileStoreMultiface() {}
  void add(boost::shared_ptr<FileStoreIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void writeFile(const RFile& rFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeFile(rFile);
    }
    ifaces_[i]->writeFile(rFile);
  }

  void readFile(RFile& _return, const std::string& filename, const UserID& owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readFile(_return, filename, owner);
    }
    ifaces_[i]->readFile(_return, filename, owner);
    return;
  }

  void deleteFile(const std::string& filename, const UserID& owner) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteFile(filename, owner);
    }
    ifaces_[i]->deleteFile(filename, owner);
  }

  void findSucc(NodeID& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findSucc(_return, key);
    }
    ifaces_[i]->findSucc(_return, key);
    return;
  }

  void findPred(NodeID& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findPred(_return, key);
    }
    ifaces_[i]->findPred(_return, key);
    return;
  }

  void getNodeSucc(NodeID& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNodeSucc(_return);
    }
    ifaces_[i]->getNodeSucc(_return);
    return;
  }

  void setNodePred(const NodeID& nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setNodePred(nodeId);
    }
    ifaces_[i]->setNodePred(nodeId);
  }

  void updateFinger(const int32_t idx, const NodeID& nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateFinger(idx, nodeId);
    }
    ifaces_[i]->updateFinger(idx, nodeId);
  }

  void getFingertable(std::vector<NodeID> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFingertable(_return);
    }
    ifaces_[i]->getFingertable(_return);
    return;
  }

  void pullUnownedFiles(std::vector<RFile> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pullUnownedFiles(_return);
    }
    ifaces_[i]->pullUnownedFiles(_return);
    return;
  }

  void pushUnownedFiles(const std::vector<RFile> & files) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushUnownedFiles(files);
    }
    ifaces_[i]->pushUnownedFiles(files);
  }

  void join(const NodeID& nodeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join(nodeId);
    }
    ifaces_[i]->join(nodeId);
  }

  void remove() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove();
    }
    ifaces_[i]->remove();
  }

};



#endif
